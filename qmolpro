#!/bin/sh
prefix='q'
this=`basename $0`
prog=${this#${prefix}}

# configuration
#Include this if workers have different core count to head, or if you want for other reasons to configure manually
#max_tasks_per_node=16 

if [ -z "$max_tasks_per_node" ]; then uname=$(uname); test $uname = Darwin && max_tasks_per_node=$(sysctl -n hw.ncpu) || max_tasks_per_node=$(nproc||echo 1) ; fi

#default
defaultoptions="-n $max_tasks_per_node -d ${TMPDIR:-/tmp}"
                                                                                
# parse options
systemconfigfile=$0.rc
echo systemconfigfile=$systemconfigfile
ls -l $systemconfigfile
configfile=${HOME}/.${this}rc
test -r $systemconfigfile && systemconfigfileoptions=$(cat ${systemconfigfile})
test -r $configfile && configfileoptions=$(cat ${configfile})
echo systemconfigfileoptions=$systemconfigfileoptions
set -- `getopt gd:vW:n:l:q:P: $defaultoptions $systemconfigfileoptions $configfileoptions $*`
parse_opts=0
while [ "$1" != -- ]; do
echo option $1 $2
  case "$1" in
    -d) eval scratchdir="$2"; shift;;
    -g) debug=1 ;;
    -v) verbose=1 ;;
    -k) keeptmp=1 ;;
    -W) OPTION="$OPTION $2"; shift;;
    -l) QSUBARGS="$QSUBARGS -l $2"; shift;;
    -n) NOPTION=$2; shift;;
    -q) QUEUE=$2; QSUBARGS="$QSUBARGS -q $2"; shift;;
    -P) PROJECT=$2; shift;;
     *) parse_opts=1;;
  esac
  shift
done
shift

# if [ x${PROJECT} == x ]; then
#   echo "Project missing. Specify it with -P (possible in $HOME/.${this}rc), or via the PROJECT environment variable"
#   exit 1;
# fi

tasks_per_node=$max_tasks_per_node
cpus=`echo $NOPTION | sed -e 's/\/.*$//'`
tasks_per_node=`echo $NOPTION | sed -e 's/^.*\///' -e 's/:.*$//'`
if [ $tasks_per_node -eq $cpus ]; then
    task_flag="total"
    tasks_per_node=$max_tasks_per_node
elif [ $tasks_per_node -gt $max_tasks_per_node ]; then
    echo TASKS_PER_NODE too high, ignoring
    task_flag="total"
    tasks_per_node=$max_tasks_per_node
fi
typeset -i nodes
let nodes=($cpus-1)/$tasks_per_node+1;
if [ $nodes -eq 1 ]; then tasks_per_node=$cpus; fi
 
if [ $parse_opts -eq 1 ] ; then
cat << EOF
Usage: $SCRIPT -n CPUS/TASKS_PER_NODE -h HH[:MM[:SS]] [-v] [-k] -W MOLPRO_OPTION INPUT_FILES
EOF
exit 1
fi


if [ ! -z $verbose ]; then
echo 'Processors:      ' $cpus
echo 'Tasks per node:  ' $tasks_per_node
echo 'Nodes:           ' $nodes
fi;

if [ "x$cpus" != "x1" ]; then
  QSUBARGS="$QSUBARGS -l select=${nodes}:ncpus=${tasks_per_node}:mpiprocs=${tasks_per_node} "
fi

DIR=`/bin/pwd`


if [ ! -z $debug ]; then debug='export MOLPRO_GA_DEBUG=1' ; fi
for file in $* ; do
jobname=`basename ${file}|sed -e 's/\.[a-zA-Z0-9]*$//'`
qjobname=`echo "$jobname" | sed -e 's,[-+.],,g' -e 's,\(..........\).*,\1,'`
echo qsub $QSUBARGS -j oe -N ${qjobname} -P $PROJECT
qsub $QSUBARGS -j oe -N ${qjobname} -P $PROJECT << EOF

if [ -r .bashrc ]; then  . .bashrc ; fi
env
export MOLPRO_OPTIONS="$MOLPRO_OPTIONS"
export PATH=$JOBPATH:\$PATH
export SCRATCHDIR=${scratchdir}/\${PBS_JOBID}
$debug
echo cd $PWD
cd $PWD
date
hostname
which $prog
if [ $prog = molpro ]; then
echo $prog -v -d \$SCRATCHDIR $OPTION $file
pbsdsh -- mkdir -p \$SCRATCHDIR
time $prog -n $cpus -d \$SCRATCHDIR $OPTION $file
if test -z $keeptmp ; then
 pbsdsh -- rm -rf \$SCRATCHDIR
fi
else
echo $prog $OPTION $file
time $prog $OPTION $file
fi
env
df -h
EOF

done

#echo PBS_NODEFILE=\$PBS_NODEFILE
#cat \$PBS_NODEFILE
#echo ======================

#export PATH=$JOBPATH:/opt/molpro/bin:\$PATH:/usr/local/bin
